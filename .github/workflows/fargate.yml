name: Build and Deploy to K8S

on:
  push:
    branches:
      - main
      - dev

jobs:
  unittest:
    name: Run UnitTest
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'
      # Get values for cache paths to be used in later steps
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: Run Unit Test
        run: |
          go test -v -tags=aws \
          -timeout=30s \
          -covermode=count \
          -coverprofile=coverage.txt \
          ./...
  build:
    name: Build Services
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'
      # Get values for cache paths to be used in later steps
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - name: Build Go binary
        env:
          _TAG: ${{ github.sha }}
          BUILD_ID: ${{ github.run_id }}
          BUILDINFO_PKG: giautm.dev/awesome/internal/buildinfo
          CGO_ENABLED: 0
          GO111MODULE: on
          GOARCH: amd64
          GOOS: linux
        run: |
          go build -tags=aws -trimpath \
          -ldflags="-s -w -extldflags=-static \
          -X=${BUILDINFO_PKG}.BuildID=${BUILD_ID} \
          -X=${BUILDINFO_PKG}.BuildTag=${_TAG}" \
          -o=./bin/ ./cmd/...
      - name: tar-bin
        run: tar cvf target-bin.tar ./bin
      - uses: actions/upload-artifact@v2
        with:
          name: go-bin
          path: target-bin.tar

  cd-development:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: build
    name: "Deploy Development"
    environment: Development
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    runs-on: [self-hosted,X64,linux,general,Development]
    strategy:
      matrix:
        service: [serve]
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - uses: actions/download-artifact@v2
        with:
          name: go-bin
          path: ./
      - name: untar-bin
        run: tar xvf target-bin.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::123456789100:role/github-actions-${{ github.event.repository.name }}
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}-${{ matrix.service }}
          flavor: |
            latest=true
          tags: |
            type=sha,format=long
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ./builders/service.Dockerfile
          labels: ${{ steps.docker-meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          build-args: |
            SERVICE=${{ matrix.service }}

      - name: Rancher Deploy
        uses: giautm/rancher-deploy-action@v0.1.11
        with:
          rancherUrlApi: ${{ secrets.RANCHER_URL_API }}
          rancherAccessKey: ${{ secrets.RANCHER_ACCESS_KEY}}
          rancherSecretKey: ${{ secrets.RANCHER_SECRET_KEY }}
          dockerImage: ${{ fromJSON(steps.docker-meta.outputs.json).tags[0] }}
          serviceName: "${{ github.event.repository.name }}-${{ matrix.service }}"

  cd-production:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [unittest,build]
    name: "Deploy Production"
    environment: Production
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    runs-on: [self-hosted,X64,linux,general,Production]
    strategy:
      matrix:
        service: [serve]
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - uses: actions/download-artifact@v2
        with:
          name: go-bin
          path: ./
      - name: untar-bin
        run: tar xvf target-bin.tar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::123456789100:role/github-actions-${{ github.event.repository.name }}
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}-${{ matrix.service }}
          flavor: |
            latest=true
          tags: |
            type=sha,format=long
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ./builders/service.Dockerfile
          labels: ${{ steps.docker-meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          build-args: |
            SERVICE=${{ matrix.service }}

      - name: Rancher Deploy
        uses: giautm/rancher-deploy-action@v0.1.11
        with:
          rancherUrlApi: ${{ secrets.RANCHER_URL_API }}
          rancherAccessKey: ${{ secrets.RANCHER_ACCESS_KEY}}
          rancherSecretKey: ${{ secrets.RANCHER_SECRET_KEY }}
          dockerImage: ${{ fromJSON(steps.docker-meta.outputs.json).tags[0] }}
          serviceName: "${{ github.event.repository.name }}-${{ matrix.service }}"
